#!/bin/bash

set -e
set -o pipefail

# Set this constant with the tag name corresponding to the image version you wish to use for the scan
# (for a list of tags visit: https://hub.docker.com/r/meterian/cli/tags)
VERSION="latest"
DOCKER_FULL_IMAGE_NAME="meterian/cli:${VERSION}"
WORKDIR=${METERIAN_WORKDIR:-$(pwd)}
echo "Current work directory: ${WORKDIR}"
echo "Contents of ${WORKDIR}"
ls ${WORKDIR}


# in this occasion utilise the client canary for the scan
if [[ "$*" =~ "--canary" ]];
then
    CLIENT_CANARY_FLAG=on
    DOCKER_FULL_IMAGE_NAME="meterian/cli-canary:${VERSION}"
    echo "Using canary version of Docker and Meterian clients"
fi

if [[ "$*" =~ "--unbound" ]];
then
    echo "Running in unbound mode"

    docker run --rm \
              --volume ${WORKDIR}:/workspace \
              --env METERIAN_API_TOKEN=${METERIAN_API_TOKEN} \
              --env CLIENT_VM_PARAMS=${CLIENT_VM_PARAMS} \
              --env CLIENT_CANARY_FLAG=${CLIENT_CANARY_FLAG} \
              --env GOPRIVATE=${GOPRIVATE} \
              --env CLIENT_ENV=${CLIENT_ENV} \
              --volume "${HOME}/.netrc":"/home/meterian/.netrc" \
              ${DOCKER_FULL_IMAGE_NAME} $*

    # please do not add any command after "docker run" as we need to preserve
    # the exit status of the meterian client

else
    echo "Running in bound mode"

    # get current uid
    HOST_UID=`id -u`
    HOST_GID=`id -g`

    CONTAINER_HOME_DIR='/home/meterian'
    VOLUME_BIND_SOURCES=''"$HOME"'/.cache '"$HOME"'/.local '"$HOME"'/.m2 '"$HOME"'/.dotnet '"$HOME"'/.nuget '"$HOME"'/.gradle '"$HOME"'/.sbt '"$HOME"'/.ivy2'
    VOLUME_BIND_DESTINATIONS=''"$CONTAINER_HOME_DIR"'/.cache '"$CONTAINER_HOME_DIR"'/.local '"$CONTAINER_HOME_DIR"'/.m2 '"$CONTAINER_HOME_DIR"'/.dotnet '"$CONTAINER_HOME_DIR"'/.nuget '"$CONTAINER_HOME_DIR"'/.gradle '"$CONTAINER_HOME_DIR"'/.sbt '"$CONTAINER_HOME_DIR"'/.ivy2'

    formDockerRunCacheMounts() {
        docker_run_data=""
        while [[ $# -gt 0 ]]; do
            local_addr="$(echo $VOLUME_BIND_SOURCES | cut -d' ' -f$#)"
            if [[ -d $local_addr ]];
            then
                docker_addr="$(echo $VOLUME_BIND_DESTINATIONS | cut -d' ' -f$#)"
                docker_run_data="${docker_run_data} --mount type=bind,source='${local_addr}',target='${docker_addr}' "
            fi
            shift
        done

        echo "$docker_run_data"
    }

    set +e
    cache_dir=$(gem environment gemdir 2>/dev/null)
    if [ $? -eq 0 ];
    then
        VOLUME_BIND_SOURCES=''"$VOLUME_BIND_SOURCES"' '"${cache_dir}"'/cache'
        VOLUME_BIND_DESTINATIONS=''"$VOLUME_BIND_DESTINATIONS"' /var/lib/gems/2.5.0/cache'
    fi

    cache_dir=$(npm root -g 2>/dev/null)
    if [ $? -eq 0 ];
    then
        VOLUME_BIND_SOURCES=''"$VOLUME_BIND_SOURCES"' '"${cache_dir}"''
        VOLUME_BIND_DESTINATIONS=''"$VOLUME_BIND_DESTINATIONS"' /usr/lib/node_modules'
    fi
    set -e

    docker_run_data="$(formDockerRunCacheMounts $VOLUME_BIND_SOURCES)"

    # mapping /tmp so that the most recent version of the meterian client is retained on the host machine causing it to be updated the least often
    docker_run_data="${docker_run_data} --mount type=bind,source=/tmp,target=/tmp "
    docker_run_data="${docker_run_data} --volume '${HOME}/.netrc':/home/meterian/.netrc"

    docker_run_data="${docker_run_data} --env HOST_UID='${HOST_UID}' --env HOST_GID='${HOST_GID}' "
    docker_run_data="${docker_run_data} --env GOPRIVATE='${GOPRIVATE}' "
    docker_run_data="${docker_run_data} --env CLIENT_ENV='${CLIENT_ENV}' "
    docker_run_data="${docker_run_data} --env METERIAN_API_TOKEN='${METERIAN_API_TOKEN}' --env CLIENT_VM_PARAMS='${CLIENT_VM_PARAMS}' --env CLIENT_CANARY_FLAG='${CLIENT_CANARY_FLAG}' '${DOCKER_FULL_IMAGE_NAME}' \$*"
    eval "docker run --rm --volume $WORKDIR:/workspace $docker_run_data"

    # please do not add any command after "docker run" as we need to preserve
    # the exit status of the meterian client

fi

# please do not add any command after "docker run" as we need to preserve
# the exit status of the meterian client
